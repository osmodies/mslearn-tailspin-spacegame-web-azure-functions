trigger:
- '*'

variables:
  buildConfiguration: 'Release'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-16.04'
      demands:
        - npm

    variables:
    - name: wwwrootDir
      value: 'Tailspin.SpaceGame.Web/wwwroot'
    - name: dotnetSdkVersion
      value: '3.1.100'
    - group: Release

    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'VS Ent-MPN- ODIAZ(972e401d-226e-48c7-a463-6d562c39edda)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az group create --name "$(rgName)" --location eastus
          az storage account create --name "$(storageName)" --resource-group "$(rgName)" --sku Standard_LRS
          az appservice plan create --name "$(planName)" --resource-group "$(rgName)" --sku B1
          az functionapp create --name "$(leaderboardName)" --resource-group "$(rgName)" --storage-account $(storageName) --consumption-plan-location eastus
          az webapp create --name "$(WebAppNameDev)" --resource-group "$(rgName)" --plan "$(planName)"
          az webapp create --name "$(WebAppNameTest)" --resource-group "$(rgName)" --plan "$(planName)"
          az webapp create --name "$(WebAppNameStaging)" --resource-group "$(rgName)" --plan "$(planName)"          
          az webapp config connection-string set --name "$(WebAppNameDev)" --resource-group "$(rgName)" --settings "DefaultConnection=$DB_CONNECTION_STRING" --connection-string-type SQLAzure
          az webapp config connection-string set --name "$(WebAppNameStaging)" --resource-group "$(rgName)" --settings "DefaultConnection=$DB_CONNECTION_STRING" --connection-string-type SQLAzure
          az webapp config connection-string set --name "$(WebAppNameTest)" --resource-group "$(rgName)" --settings "DefaultConnection=$DB_CONNECTION_STRING" --connection-string-type SQLAzure
          az webapp list   --resource-group "$(rgName)"   --query "[].{hostName: defaultHostName, state: state}"   --output table
#          az webapp deployment slot create --name "$(WebAppNameStaging)" --resource-group "$(rgName)" --slot swap
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

- stage: 'Deploy'
  displayName: 'Deploy the web application'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-16.04'
    environment: spike
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: ''
              appType: 'webAppLinux'
              appName: '$(WebAppNameDev)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/Tailspin.SpaceGame.Web.zip'
          - task: AzureFunctionApp@1
            displayName: 'Azure Function Deploy: leaderboard'
            inputs:
              azureSubscription: 'VS Ent-MPN- ODIAZ(972e401d-226e-48c7-a463-6d562c39edda)'
              appType: 'functionAppLinux'
              appName: '$(LeaderboardAppName)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/Tailspin.SpaceGame.LeaderboardFunction.zip'
              runtimeStack: 'DOCKER|microsoft/azure-functions-dotnet-core2.0:2.0'
              startUpCommand: 'func azure functionapp publish $(functionAppName) --no-bundler'
          - task: AzureAppServiceSettings@1
            displayName: 'Update web app settings'
            inputs:
              azureSubscription: 'VS Ent-MPN- ODIAZ(972e401d-226e-48c7-a463-6d562c39edda)'
              appName: '$(webazfuncionName)'
              resourceGroupName: '$(ResourceGroupName)'
              appSettings: |
                [
                  {
                    "name": "AppSettings:LeaderboardFunctionUrl",
                    "value": "http://$(LeaderboardAppName).azurewebsites.net/api/LeaderboardFunction",
                    "slotSetting": false
                  }
                ]